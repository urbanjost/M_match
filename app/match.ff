!----------------------------------------------------------------------------------------------------------------------------------!
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!----------------------------------------------------------------------------------------------------------------------------------!
program match_exe
use M_kracken, only : kracken, sget, lget, UNNAMED
use M_io,      only : read_line
use M_match,   only : getpat, match, regex_pattern, yes, no, err
use M_strings, only : upper
implicit none
character(len=:),allocatable :: argument, line, prefix
integer                      :: lineno, test, lun, ios, i
type(regex_pattern)          :: p
logical                      :: ignore_case
   prefix=''
   call kracken('match','-e -help .false. -version .false. -i .false. -v .false.',style='args') ! define and crack command line
   call help_usage(lget('match_help'))             ! if -help option is present, display help text and exit
   call help_version(lget('match_version'))        ! if -version option is present, display version text and exit
   ignore_case=lget('match_i')
   test=merge(NO,YES,lget('match_v'))
   argument=sget('match_e')
   if(argument.eq.'')then
      stop '*match* missing expression.'
   endif
   if(ignore_case)then
      argument=upper(argument)
   endif

   if (getpat(argument, p%pat) .eq. ERR) then
      stop '*match* Illegal pattern.'
   endif
   deallocate(argument)

   if(size(unnamed).eq.0)then
      unnamed=[character(len=len(unnamed)) :: unnamed,'-']
   endif

   do i=1,size(unnamed)
      lineno = 0
      if(unnamed(i).eq.'-')then
         lun=5
         call scan()
      else
         open(newunit=lun,file=unnamed(i),iostat=ios)
         if(ios.eq.0)then
            if(size(unnamed).gt.2)then
               prefix=trim(unnamed(i))//': '
            else
               prefix=''
            endif
            call scan()
         endif
      endif
   enddo
contains
!----------------------------------------------------------------------------------------------------------------------------------!
subroutine scan()
   INFINITE: do while (read_line(line,lun)==0)
      lineno = lineno + 1
      ! silly efficiency as in convert to uppercase unconditionally
      !if (match(merge(upper(line),line,ignore_case), p%pat) .eq. test) then
      if(ignore_case)then
         if (match(upper(line), p%pat) .eq. test) then
            write(*,'(*(g0,1x))')prefix,lineno,trim(line)
         endif
      elseif (match(line, p%pat) .eq. test) then
         write(*,'(*(g0,1x))')prefix,lineno,trim(line)
      endif
   enddo INFINITE
end subroutine scan
!----------------------------------------------------------------------------------------------------------------------------------!
$BLOCK HELP -file match.1.man
NAME                                                                            
    match(1f) - find occurrences of a Regular Expression in a file(s).          
    (LICENSE:PD)                                                                
SYNOPSIS                                                                        
    match [-v] [-i] -e EXPRESSION [FILES]| --help| --version                    
DESCRIPTION                                                                     
    Search for Regular Expressions in input files.                              
                                                                                
       ^   beginning of line                                                    
       $   end of line                                                          
       []  class of characters. In a class definition                           
            ^  as the first character, means to negate                          
            -  if not the first character denotes a range                       
               of characters                                                    
       .   any character                                                        
       *   repeat previous character zero or more times                         
       \   escape next character                                                
OPTIONS                                                                         
    -e EXPRESSION  Regular expression describing strings to locate              
                   in the input file(s)                                         
    FILES          Names of files to search. Defaults to stdin.                 
    -v             veto mode. Show lines NOT matching expression                
    -i             ignore case                                                  
    --help         display this help and exit                                   
    --version      output version information and exit                          
EXAMPLES                                                                        
    Sample commands                                                             
                                                                                
     match '^[A-Z ][A-Z ]*$' <file.txt                                        
AUTHOR                                                                          
   John S. Urban                                                                
LICENSE                                                                         
   Public Domain                                                                
$BLOCK
!----------------------------------------------------------------------------------------------------------------------------------!
$BLOCK VERSION 
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        match(1)
DESCRIPTION:    find occurrences of a Regular Expression in a file(s).
VERSION:        1.0, 20191231
AUTHOR:         John S. Urban
LICENSE:        Public Domain. This is free software: you are free to change and redistribute it.
                There is NO WARRANTY, to the extent permitted by law.
COMPILED:       Fri, Apr 24th, 2020 3:14:50 PM
$BLOCK
!----------------------------------------------------------------------------------------------------------------------------------!
end program match_exe
!----------------------------------------------------------------------------------------------------------------------------------!
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!----------------------------------------------------------------------------------------------------------------------------------!
